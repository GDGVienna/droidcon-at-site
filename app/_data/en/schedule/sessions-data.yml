-
  id: 301
  title: "Breakfast &amp; Registration"
  place: "Hall"
  service: true
  description: "We will welcome you with hot espresso, danish pastry and your conference badge."
-
  id: 302
  title: "Welcome"
  place: "Room 1"
  service: true
  description: "Opening of this day of droidcon Vienna"
-
  id: 303
  title: "Lunch Break"
  place: "Hall"
  service: true
-
  id: 307
  title: "Coffee Break"
  place: "Hall"
  service: true
  description: "The best time to talk with speakers and attendees"
-
  id: 308
  title: "Closing"
  place: "Hall"
  service: true
  description: "Closing this conference day"
-
  id: 309
  title: "Afterparty"
  place: "TBA"
  service: true
  description: "Time to network and relax"
-
  id: 101
  title: "Keynote"
  description: "Laurence Moroney will open droidcon - expect a lot of content around Firebase, the Backend-as-a-Service offering for mobile from Google"
  subtype: keynote
  speakers: ["laurence-moroney"]
-
  id: 102
  title: "Supercharging you Android app release with fastlane"
  description: "How would you like 2 extra hours of your time back every week? All mobile app developers face similar workflows as they work to upload an app to Google Play. Many of these processes are currently done manually, but why not automate them? Fabric’s set of developer tools, collectively called fastlane, makes building, testing, and releasing your app faster, reproducible and less troublesome, leaving developers more time to focus on feature code and not deployment! Learn how you can automate the tedious tasks to generate release notes, screenshots and push your final submission Google Play portal effortlessly from your command line with a powerful open source tool. <a href='https://github.com/fastlane/fastlane/' target='_blank'>github.com/fastlane/fastlane/</a>"
  subtype: presentation
  speakers: ["andrea-falcone"]
  complexity: "Intermediate" 
-
  id: 103
  title: "The 2016 Android Developer Toolbox"
  description: "Developing for Android has drastically changed over the last few years. We now have a gigantic toolbox we can benefit from to improve our productivity and build better applications. During this presentation I will introduce some of the tools we use daily at happn, a multi-million users French dating application. I will talk about many tools that help us to: - Simulate a laggy/instable HTTP(s) connection - Interact with our application to analyze logs, views, and modify any data (inc. memory / shared preferences / database) in real time - Change our application's backend server without recompiling - Better understand our technical debt - Create a REST mock server in a few seconds to anticipate the development of a feature when the backend is not developed yet - Measure the performance (cpu/memory) of our application - Decompile our application to better understand and analyze its security - Alter a server response and check whether the application behaves properly - and many more tips..."
  subtype: presentation
  speakers: ["gautier-mechling"]
  complexity: "Beginner" 
-
  id: 104
  title: "Developing Apps for Android Auto"
  description: "We introduce Android Auto, yet another way to connect your smartphone to the car, and compare it with other solutions. By presenting the Android Auto APIs with current features and restrictions as well as the development workflow and toolset the audience will have the necessary input to start coding. When we first heard about Android Auto, we had visions of an awesome smartphone/car integration in mind. Unfortunately the current use cases for apps are limited to music and texting and we have no access to vehicle data (e.g. GPS position, speed, engine type). The development of Android Auto apps is straightforward for the given use cases and your music or texting app can be easily extended to the Android Auto context. Nevertheless we found some pitfalls that we would like to share. Android Auto is bleeding edge: APIs, development tools, etc. are changing fast, documentation is rare and toolkits are still unstable. Testing the app on real car head units is difficult. The fast update cycles of the Android Auto OS with new features during the last couple of months raise our hopes, that the APIs will be extended to more interesting uses cases very soon."
  subtype: "presentation"
  speakers: ["sina-grunau", "christian-dziuba"]
  complexity: "Intermediate"
-
  id: 105
  title: "Safety first – best practices in app security"
  description: "Smartphones have become an extension of the user, allowing them to buy stuff, pay for services and hold a strong social presence. This places strict demands on security and data privacy. If you want your users to be comfortable using your app, you must place emphasis on utilising the security methods at your disposal. This talk will cover the best practices in app security, demonstrate common mistakes and pitfalls and show what we’ve learned in our own experience in the mobile banking industry."
  subtype: "presentation"
  speakers: ["ana-baotic"]
  complexity: "Intermediate"
-
  id: 106
  title: "AOSP: Hack your own Android ROM"
  description: "Enough with Android apps, now let's build our own custom ROM! Ever wondered how to modify and compile the Android Open Source Project (AOSP)? Want to build you own custom app, or use it for an embedded device? How to start, where to modify, how the work is done. This lecture will explain all the basics and how to continue on your own."
  subtype: "presentation"
  speakers: ["amahdy-abdelaziz"]
  complexity: "Intermediate"
-
  id: 107
  title: "Scaling Android Apps - how I learned to love the puzzle"
  description: "Let's face it - the more successful a product is, the more complex it becomes. New features are pulled into the backlog, bugs pile up like candy on Halloween and deadlines move from \"We need it Tomorrow\" to \"It had to be done last week!\". As a result teams grow, new ones emerge and a once small and simple app overpasses the dex limit and requires 300 seconds for a cold build (if you're lucky, of course). At ${company_name} we value quality, but we also require speed and a continues delivery that should never stop. With seven+ teams contributing to the main app the risk of breaking the stability of the project is even higher. Thus a clean and straight forward architecture is key for a successful rollout and our QAs sanity. This talk is about our journey from a one-block app (with a twisted maze of legacy code on top), to a multi modular and sustainable project consisting of small semi-autonomous components that assemble into our flagship app. Almost like a jigsaw puzzle."
  subtype: "presentation"
  speakers: ["serghei-lotutovici"]
  complexity: "Intermediate"
-
  id: 108
  title: "#PERFMATTERS for Android"
  description: "The slogan ‘#PERFMATTERS’ by Colt McAnlis is one of the most important statements, which an Android developer should follow. A well performing application makes the difference between a nice looking application and one, which gets successful. You, as an Android developer, have the responsibility to delight your users, so they don’t feel how much work your application has to burden to fulfill the user’s needs. This session will show you some easy optimizations and how to avoid glitches in the application. A lot of developers would shout, that this is premature optimization. In contrary it is preventive. With a small amount of work while developing you can avoid a lot of pitfalls. You will hopefully have a better understanding of the underlying system afterwards. During the session some tools and frameworks will be presented for helping you to fulfill your mission."
  subtype: "presentation"
  speakers: ["hasan-hosgel"]
  complexity: "Intermediate"
-
  id: 109
  title: "Crash Wars: The handling awakens"
  description: "For years crash handling was one of the worst parts of the Android development process. With each new crash you were risking a lot - getting bad Google Play reviews, negative comments and dissatisfied customers. Nobody likes the \"Unfortunately, your app has crashed\" dialog, but there was only so much you could do about it, beside logging the crash to a remote server. In the last couple of months a lot has changed. We've been introduced to brand new tools to help us cope with this problem. During this talk, we'll demonstrate how to use several tools and techniques that have made our lives easier. We'll discuss different ways of predicting crashes even before they occur by means of static code checkers, automatic tests and CI setup. Additionally, we'll show you how to detect memory leaks, explain advanced exception and crash logging by using a combination of several different tools. Finally, we’ll demonstrate how to provide a better crash experience or hide the crash altogether if the crash is simply inevitable!"
  subtype: "presentation"
  speakers: ["zeljko-plesac"]
  complexity: "Intermediate"
-
  id: 110
  title: "MVVM architecture with the data binding library"
  description: "Model-View-Presenter (MVP) architecture is widely used in today’s Android apps to separate the view from the view logic and the model by introducing a presenter. Model-View-ViewModel (MVVM) is quite similar to MVP, with the view model acting as an enhanced presenter, using a data binder to keep the view model and the view in sync. By binding the view to view model properties, the data binder can handle view updates, without the need to manually set changed data back to the view (e.g. no more setText() or setVisibility() on a TextView). As with the presenter in MVP, the view model can easily be unit tested. This talk gives an introduction to the MVVM architecture and how it can be used on Android with the data binding library."
  subtype: "presentation"
  speakers: ["patrick-loewenstein"]
  complexity: "Intermediate"
-
  id: 111
  title: "Android Testing Support Library: The Nitty Gritty"
  description: "8 years since Android’s been released we finally have a proper Google-supported solution for testing in the Testing Support Library. We’ll go through the various stages of it, explore it’s (not so) hidden features and learn how to use it to build better apps. We will cover things such as (breaking the) test Rules, (outrunning the) test Runners and how to make most of tools such as Espresso & the Cloud Test Lab."
  subtype: "presentation"
  speakers: ["zan-markan"]
  complexity: "Intermediate"
-
  id: 112
  title: "Why testing an Android framework is different?"
  description: "At PSPDFKit we're building, maintaining and evolving a large PDF framework (for viewing and editing PDF documents) with of more than ~500 Java classes, and an even bigger number of classes in native C++ code. We're iterating quickly, trying to keep up a bi-weekly release cycle including features, improvements, fixes – along with a lot of refactorings to keep on top of the code. Now after working for nearly two years on our PDF framework, we're looking back at a journey of testing. We've built a comprehensive test suite of more than 700+ (growing) distinctive instrumentation tests including unit tests, screenshot tests, UI integration tests, etc. Right now a full test run would take about 40 minutes, so we're doing a lot of tricks to keep the turnaround time low, so we can get fast feedback. We're testing using a Jenkins setup, on an in-house fleet of 15 MacMini workers running Genymotion for UI tests, plus 2 linux servers for additional non-UI unit tests. While building up the infrastructure, we also learned a lot about writing maintainable and stable Android tests. Especially, we learned about the problems of the Android testing framework, including Espresso, and further platform limitations that complicate testing Android frameworks (in contrast to testing apps). In my talk I would like to outline several of the issues that we encountered (method count limits in library test APKs, Espresso test flakiness, slow execution speeds of instrumentation tests, etc.) and how we managed to overcome them."
  subtype: "presentation"
  speakers: ["david-schreiber-ranner"]
  complexity: "Intermediate"
-
  id: 113
  title: "Building a maintainable app using MVP and Dagger 2"
  description: "Very few concepts shook up the Android world as MVP and Dagger 2 did. MVP gave us a long-awaited clean architecture in Android apps, while Dagger 2 brought it to a whole new level by removing all the boilerplate code that we don't like writing. In this talk, I will demonstrate the benefits of the MVP architecture and its reusability and scalability. I’ll go over Dagger’s role in MVP as well as unit testing, and show how to focus on creating reusable modules on a concrete example."
  subtype: "presentation"
  speakers: ["kristijan-jurkovic"]
  complexity: "Intermediate"
-
  id: 114
  title: "Nearby API - I'm lost, let's see what's nearby!"
  description: "With Google Play Services Version 7.8, which was released in August 2015, Google introduced the Nearby API. This API makes use of an array of technologies like Wifi, Bluetooth, Beacons and even Audio to communicate with nearby objects like Bus Stops, Train platforms or even Indoor Locations like a museum. There are a lot of possibilities for using the Nearby API, for example creating a Local Multiplayer game where people which are physically next to each other can join a game without the need of an internet connection. Or a smart bus stop that might tell you that your next bus is delayed by 10 minutes due to an accident and therefore provides you with some interesting articles to spend your time wisely while waiting. The use cases are almost endless. The audience will get a quick overview about the Nearby API and get an understanding of how it functions and what can be done with the Nearby API. This talk will touch the Nearby Messages API, the Nearby Locations API and the (eddystone) beacon technology."
  subtype: "presentation"
  speakers: ["daniel-hartwich"]
  complexity: "Beginner"
-
  id: 200
  title: "Barcamp"
  description: "Your content, selected by you!"
  subtype: barcamp
-
  id: 999
  title: "TBA"
  description: "More details will be announced later"
  subtype: presentation
  speakers: []
